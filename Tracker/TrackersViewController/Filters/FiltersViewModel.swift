import Foundation
import Combine

final class FiltersViewModel {
    
    // MARK: - Published properties
    @Published private(set) var filteredTrackers: [Tracker] = []
    @Published var selectedFilterIndex: Int = 0 { didSet { applyAllFilters(for: selectedDate) } }
    @Published var selectedDate: Date = Date() { didSet { applyAllFilters(for: selectedDate) } }
    
    // MARK: - Other properties
    var searchText: String = "" { didSet { applyAllFilters(for: selectedDate) } }
    var selectedCategory: TrackerCategory?
    var onFilteredTrackersUpdated: (() -> Void)?
    
    private let trackersProvider: () -> [Tracker]
    private let isCompletedProvider: (Tracker, Date) -> Bool
    private let dateFilter: TrackersDateFilter
    private let calendar = Calendar.current
    
    // MARK: - Init
    init(
        trackersProvider: @escaping () -> [Tracker],
        isCompletedProvider: @escaping (Tracker, Date) -> Bool,
        dateFilter: TrackersDateFilter
    ) {
        self.trackersProvider = trackersProvider
        self.isCompletedProvider = isCompletedProvider
        self.dateFilter = dateFilter
    }
    
    // MARK: - Unified filtering
    private var hasInitialDataLoaded = false
    
    func setInitialDataLoaded() {
        hasInitialDataLoaded = true
        AppLogger.trackers.info("[Filter] ‚öôÔ∏è Initial data loaded, filters can now apply")
        applyAllFilters(for: selectedDate)
    }
    
    func applyAllFilters(for date: Date) {
        guard hasInitialDataLoaded else {
            AppLogger.trackers.debug("[Filter] ‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é ‚Äî –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        }

        var trackers = trackersProvider()
        AppLogger.trackers.info("[Filter] üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –¥–∞—Ç—ã \(date.startOfDayUTC().formatted()) ‚Äî –≤—Å–µ–≥–æ \(trackers.count) —Ç—Ä–µ–∫–µ—Ä–æ–≤")

        // üß© –ù–æ–≤—ã–π –ª–æ–≥
        for t in trackers {
            AppLogger.trackers.debug("[Filter] ‚öôÔ∏è \(t.name) schedule: \(t.schedule.map { $0.rawValue })")
        }

        trackers = dateFilter.filterTrackersByDay(trackers, date: date)
        trackers = dateFilter.filterTrackersByIndex(
            trackers,
            selectedFilterIndex: selectedFilterIndex,
            currentDate: date,
            searchText: searchText,
            completionChecker: isCompletedProvider
        )
        AppLogger.trackers.info("[Filter] ‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: \(trackers.count)")
        filteredTrackers = trackers
        onFilteredTrackersUpdated?()
    }
    
    // MARK: - Helpers
    func selectFilter(index: Int) {
        selectedFilterIndex = index
    }
}
