import Foundation
import Combine

final class FiltersViewModel {
    
    @Published private(set) var filteredTrackers: [Tracker] = []
    @Published var selectedFilterIndex: Int = 0
    @Published var selectedDate: Date = Date()
    @Published var searchText: String = ""
    
    var selectedCategory: TrackerCategory?
    var onFilteredTrackersUpdated: (() -> Void)?
    
    private let trackersProvider: () -> [Tracker]
    private let isCompletedProvider: (Tracker, Date) -> Bool
    private let dateFilter: TrackersDateFilter
    private let calendar = Calendar.current
    private var cancellables = Set<AnyCancellable>()
    private var hasInitialDataLoaded = false
    
    // MARK: - Init
    init(
        trackersProvider: @escaping () -> [Tracker],
        isCompletedProvider: @escaping (Tracker, Date) -> Bool,
        dateFilter: TrackersDateFilter
    ) {
        self.trackersProvider = trackersProvider
        self.isCompletedProvider = isCompletedProvider
        self.dateFilter = dateFilter
        
        setupFilteringPipeline()
    }
    
    // MARK: - Combine pipeline
    private func setupFilteringPipeline() {
        Publishers.CombineLatest3($selectedDate, $selectedFilterIndex, $searchText)
            .debounce(for: .milliseconds(150), scheduler: DispatchQueue.main)
            .sink { [weak self] (date, filterIndex, text) in
                guard let self else { return }
                guard self.hasInitialDataLoaded else {
                    return
                }
                self.applyAllFilters(for: date)
            }
            .store(in: &cancellables)
    }
    
    func setInitialDataLoaded() {
        hasInitialDataLoaded = true
        applyAllFilters(for: selectedDate)
    }

    // MARK: - Filtering logic
    func applyAllFilters(for date: Date) {
        // 1Ô∏è‚É£ –ë–µ—Ä—ë–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã
        var trackers = trackersProvider()

        // 2Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        trackers = dateFilter.filterTrackersByDay(trackers, date: date)

        // 3Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é / –∏–Ω–¥–µ–∫—Å—É
        trackers = dateFilter.filterTrackersByIndex(
            trackers,
            selectedFilterIndex: selectedFilterIndex,
            currentDate: date,
            searchText: searchText,
            completionChecker: isCompletedProvider
        )

        // 4Ô∏è‚É£ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        trackers = trackers.filter { _ in true }

        // 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if trackers.map({ $0.id }) != filteredTrackers.map({ $0.id }) {
            filteredTrackers = trackers
            print("üîÅ [FiltersViewModel] –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã –¥–ª—è –¥–∞—Ç—ã \(date): \(trackers.map { $0.name })")
            onFilteredTrackersUpdated?()
        } else {
            // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑, –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            print("‚öôÔ∏è [FiltersViewModel] –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –¥–∞—Ç—É \(date) –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–µ—Ä–æ–≤.")
        }
    }
    
    func selectFilter(index: Int) {
        selectedFilterIndex = index
    }
}
