import UIKit
import Combine

final class TrackersViewController: UIViewController {
    
    // MARK: - ViewModel
    let viewModel: TrackersViewModel
    let ui = TrackersUI()
    
    private let titleView = MainTitleLabelView(title: NSLocalizedString("trackers.title", comment: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Ç—Ä–µ–∫–µ—Ä–æ–≤"))
    private let placeholderView = PlaceholderView()
    
    // MARK: - Init
    init(viewModel: TrackersViewModel = TrackersViewModel()) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }
    required init?(coder: NSCoder) {
        self.viewModel = TrackersViewModel()
        super.init(coder: coder)
    }
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // MARK: –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–∞
        view.backgroundColor = AppColors.background
        
        // MARK: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è header –∏ —è—á–µ–µ–∫
        ui.collectionView.register(
            TrackerSectionHeaderView.self,
            forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
            withReuseIdentifier: TrackerSectionHeaderView.reuseIdentifier
        )
        ui.collectionView.register(
            TrackerCell.self,
            forCellWithReuseIdentifier: TrackerCell.reuseIdentifier
        )
        
        // MARK: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout —á–µ—Ä–µ–∑ ui
        setupLayout()
        
        // MARK: –ü—Ä–∏–≤—è–∑–∫–∞ DataSource / Delegate
        ui.collectionView.dataSource = self
        ui.collectionView.delegate = self
        
        // MARK: –î–æ–±–∞–≤–ª—è–µ–º long press –Ω–∞ —è—á–µ–π–∫–∏
        let longPress = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPress(_:)))
        ui.collectionView.addGestureRecognizer(longPress)
        
        // MARK: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ placeholder
        ui.placeholderView.configure(
            imageName: "Star",
            text: NSLocalizedString("trackers.placeholder_text", comment: "–¢–µ–∫—Å—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤")
        )
        
        // MARK: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        setupCalendarContainer()
        
        // MARK: –ü—Ä–∏–≤—è–∑–∫–∞ ViewModel
        bindViewModel()
        viewModel.ensureDefaultCategory()
        
        // MARK: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        updateUI()
        updatePlaceholder()
        updateDateText()
        
        // MARK: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ searchBar
        ui.searchBar.delegate = self
        ui.searchBar.barTintColor = AppColors.background
        ui.searchBar.searchTextField.backgroundColor = AppColors.background
        ui.searchBar.searchTextField.textColor = AppColors.textPrimary
        ui.searchBar.searchTextField.tintColor = AppColors.primaryBlue
        
        // MARK: –ü—Ä–∏–≤—è–∑–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
        ui.addButton.addTarget(self, action: #selector(addButtonTapped), for: .touchUpInside)
        ui.dateButton.addTarget(self, action: #selector(toggleCalendar), for: .touchUpInside)
        ui.filtersButton.addTarget(self, action: #selector(filtersTapped), for: .touchUpInside)
        ui.calendarView.addTarget(self, action: #selector(calendarDateChanged(_:)), for: .valueChanged)
        
        // MARK: –û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤
        viewModel.trackerStore.debugPrintSchedules()
        print("üì¶ trackers count:", viewModel.trackers.count)
        print("üì¶ categories count:", viewModel.categories.count)
        print("üì¶ filteredTrackers count:", viewModel.filteredTrackers.count)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        AnalyticsService.shared.trackOpen(screen: "Main")
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        AnalyticsService.shared.trackClose(screen: "Main")
    }
    
    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        // –§–æ–Ω —ç–∫—Ä–∞–Ω–∞
        view.backgroundColor = AppColors.background
        // –ö–æ–ª–ª–µ–∫—Ü–∏—è
        ui.collectionView.backgroundColor = AppColors.background
        // –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        ui.searchBar.barTintColor = AppColors.background
        ui.searchBar.searchTextField.backgroundColor = AppColors.background
        ui.searchBar.searchTextField.textColor = AppColors.textPrimary
        // –ö–Ω–æ–ø–∫–∞ –¥–∞—Ç—ã
        ui.dateButton.backgroundColor = AppColors.textSecondary.withAlphaComponent(0.1)
        ui.dateButton.setTitleColor(AppColors.textPrimary, for: .normal)
        // –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        ui.calendarContainer.backgroundColor = AppColors.background
        ui.calendarView.backgroundColor = AppColors.background
    }
    
    // MARK: - Layout
    private func setupLayout() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π layout —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä, –ø–µ—Ä–µ–¥–∞–≤–∞—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ ui
        MainHeaderLayoutHelper.setupTrackerLayout(
            in: view,
            titleView: ui.titleView,
            addButton: ui.addButton,
            dateButton: ui.dateButton,
            searchBar: ui.searchBar,
            collectionView: ui.collectionView
        )
        
        view.addSubview(ui.filtersButton)
        NSLayoutConstraint.activate([
            ui.filtersButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            ui.filtersButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
            ui.filtersButton.widthAnchor.constraint(equalToConstant: 114),
            ui.filtersButton.heightAnchor.constraint(equalToConstant: 50)
        ])
        
        // –û—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –ø–æ–∏—Å–∫–æ–º –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π
        let spacingTitleToSearch: CGFloat = 2
        let spacingSearchToCollection: CGFloat = 8
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        NSLayoutConstraint.activate([
            // –ü–æ–∏—Å–∫ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            ui.searchBar.topAnchor.constraint(equalTo: ui.titleView.bottomAnchor, constant: spacingTitleToSearch),
            ui.searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            ui.searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            
            // –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–¥ –ø–æ–∏—Å–∫–æ–º
            ui.collectionView.topAnchor.constraint(equalTo: ui.searchBar.bottomAnchor, constant: spacingSearchToCollection),
            ui.collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            ui.collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            ui.collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
    
    func setupPlaceholder() {
        view.addSubview(placeholderView)
        NSLayoutConstraint.activate([
            placeholderView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            placeholderView.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
    
    func setupCalendarContainer() {
        view.addSubview(ui.calendarContainer)
        NSLayoutConstraint.activate([
            ui.calendarContainer.topAnchor.constraint(equalTo: ui.addButton.bottomAnchor, constant: 16),
            ui.calendarContainer.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            ui.calendarContainer.widthAnchor.constraint(equalToConstant: 343),
            ui.calendarContainer.heightAnchor.constraint(equalToConstant: 325)
        ])
    }
    
    func updatePlaceholder() {
        if viewModel.filteredTrackers.isEmpty {
            ui.placeholderView.isHidden = false
            
            if let searchText = ui.searchBar.text, !searchText.isEmpty {
                ui.placeholderView.configure(
                    imageName: "NoSerach",
                    text: NSLocalizedString("trackers.placeholder_no_results", comment: "–¢–µ–∫—Å—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
                )
            } else {
                // –ù–µ—Ç –≤–æ–æ–±—â–µ —Ç—Ä–µ–∫–µ—Ä–æ–≤
                ui.placeholderView.configure(
                    imageName: "Star",
                    text: NSLocalizedString("trackers.placeholder_text", comment: "–¢–µ–∫—Å—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤")
                )
            }
        } else {
            ui.placeholderView.isHidden = true
        }
    }
    
    func updateDateText() {
        let df = DateFormatter()
        df.locale = Locale(identifier: "ru_RU")
        df.dateFormat = "dd.MM.yy"
        ui.dateButton.setTitle(df.string(from: viewModel.currentDate), for: .normal)
    }
    
    // MARK: - Binding
    
    private func setupBindings() {
        viewModel.onTrackersUpdated = { [weak self] in
            self?.updateUI()
        }
    }
    
    
    // MARK: - UI Update Debounce
    private var uiUpdateWorkItem: DispatchWorkItem?

    private func bindViewModel() {
        
        // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        func scheduleUIRefresh(reason: String) {
            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            uiUpdateWorkItem?.cancel()
            
            let workItem = DispatchWorkItem { [weak self] in
                guard let self = self else { return }
                
                // –ü–µ—Ä–µ—Å—á—ë—Ç visibleCategories –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ reloadData
                self.recalculateVisibleCategories()
                
                print("üîÅ UI Refresh triggered by: \(reason)")
                print("üîÅ visibleCategories: \(self.visibleCategories.map { $0.title })")
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ collectionView –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
                guard self.ui.collectionView.window != nil else {
                    print("‚ö†Ô∏è collectionView –Ω–µ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏, reloadData –ø—Ä–æ–ø—É—â–µ–Ω")
                    return
                }
                
                self.ui.collectionView.reloadData()
                self.updatePlaceholder()
            }
            
            uiUpdateWorkItem = workItem
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–µ–±–∞—É–Ω—Å–æ–º, —á—Ç–æ–±—ã —Å–≥–ª–∞–¥–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1, execute: workItem)
        }
        
        // –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        let refreshUI = { [weak self] (reason: String) in
            guard let self = self else { return }
            scheduleUIRefresh(reason: reason)
        }
        
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ViewModel
        viewModel.onTrackersUpdated = { refreshUI("Trackers Updated") }
        viewModel.onCategoriesUpdated = { refreshUI("Categories Updated") }
        viewModel.onDateChanged = { date in
            refreshUI("Date Changed")
            print("üîÅ onDateChanged called: \(date)")
        }
        
        viewModel.onEditTracker = { [weak self] tracker in
            guard let self = self else { return }
            print("üñã onEditTracker called for: \(tracker.name)")
            
            guard let trackerCoreData = self.viewModel.trackerStore.fetchTracker(by: tracker.id) else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ TrackerCoreData –¥–ª—è \(tracker.name)")
                return
            }
            self.editTracker(trackerCoreData)
        }
    }

    // MARK: - Visible Categories
    var visibleCategories: [TrackerCategory] = []

    private func recalculateVisibleCategories() {
        visibleCategories = viewModel.categories.filter { category in
            viewModel.filteredTrackers.contains { tracker in
                (tracker.trackerCategory?.title ?? "–ú–æ–∏ —Ç—Ä–µ–∫–µ—Ä—ã") == category.title
            }
        }
    }

    // MARK: - Update UI
    func updateUI() {
        // –ü–µ—Ä–µ—Å—á—ë—Ç –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI
        recalculateVisibleCategories()
        
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ collectionView –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            guard self.ui.collectionView.window != nil else {
                print("‚ö†Ô∏è collectionView –Ω–µ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏, reloadData –ø—Ä–æ–ø—É—â–µ–Ω")
                return
            }
            
            print("üîÅ updateUI -> visibleCategories: \(self.visibleCategories.map { $0.title })")
            print("üß© reloadData called, filteredTrackers:", self.viewModel.filteredTrackers.count)
            self.ui.collectionView.reloadData()
        }
    }
    
    // MARK: - Actions
    @objc func addButtonTapped() {
        AnalyticsService.shared.trackClick(item: "add_track", screen: "Main")
        let createTrackerVC = CreateTrackerViewController()
        createTrackerVC.onTrackerCreated = { [weak self] tracker in
            self?.viewModel.addTrackerToDefaultCategory(tracker)
        }
        present(createTrackerVC, animated: true)
    }
    
    @objc func toggleCalendar() {
        ui.calendarContainer.isHidden.toggle()
    }
    
    @objc func calendarDateChanged(_ sender: UIDatePicker) {
        viewModel.currentDate = sender.date
        updateDateText()
        viewModel.filterByDate()
        ui.collectionView.reloadData()
    }
    
    @objc private func filtersTapped() {
        AnalyticsService.shared.trackClick(item: "filter", screen: "Main")
        let filtersVC = FiltersViewController()
        filtersVC.onFilterSelected = { [weak self] index in
            guard let self = self else { return }
            self.viewModel.selectedFilterIndex = index
            print("üß© reloadData called, filteredTrackers:", self.viewModel.filteredTrackers.count)
            self.ui.collectionView.reloadData()
        }
        filtersVC.modalPresentationStyle = .pageSheet
        present(filtersVC, animated: true)
    }
    
    @objc func handleLongPress(_ gesture: UILongPressGestureRecognizer) {
        guard gesture.state == .began else { return }
        
        let location = gesture.location(in: ui.collectionView)
        guard let indexPath = ui.collectionView.indexPathForItem(at: location),
              let cell = ui.collectionView.cellForItem(at: indexPath) else { return }
        
        guard visibleCategories.indices.contains(indexPath.section) else { return }
        let category = visibleCategories[indexPath.section]
        
        let trackersInCategory = viewModel.filteredTrackers.filter { tracker in
            tracker.trackerCategory?.title == category.title ||
            (tracker.trackerCategory == nil && category.title == "–ú–æ–∏ —Ç—Ä–µ–∫–µ—Ä—ã")
        }
        
        guard trackersInCategory.indices.contains(indexPath.item) else { return }
        let tracker = trackersInCategory[indexPath.item]
        
        ActionMenuPresenter.show(for: cell, in: self, actions: [
            .init(title: (tracker.trackerCategory?.title == viewModel.pinnedCategoryTitle) ? "–û—Ç–∫—Ä–µ–ø–∏—Ç—å" : "–ó–∞–∫—Ä–µ–ø–∏—Ç—å",
                  style: .default) { [weak self] in
                      guard let self = self else { return }
                      if tracker.trackerCategory?.title == self.viewModel.pinnedCategoryTitle {
                          self.viewModel.unpinTracker(tracker)
                      } else {
                          self.viewModel.pinTracker(tracker)
                      }
                  },
            .init(title: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", style: .default) { [weak self] in
                guard let self = self else { return }
                AnalyticsService.shared.trackClick(item: "edit", screen: "Main")
                self.viewModel.editTracker(tracker)
            },
            .init(title: "–£–¥–∞–ª–∏—Ç—å", style: .destructive) { [weak self] in
                guard let self = self else { return }
                AnalyticsService.shared.trackClick(item: "delete", screen: "Main")
                let alert = UIAlertController(title: "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä?", message: "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", preferredStyle: .alert)
                alert.addAction(UIAlertAction(title: "–£–¥–∞–ª–∏—Ç—å", style: .destructive) { _ in
                    self.viewModel.deleteTracker(tracker)
                })
                alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
                self.present(alert, animated: true)
            }
        ])
    }
    
    func togglePin(for tracker: Tracker) {
        if tracker.trackerCategory?.title == viewModel.pinnedCategoryTitle {
            viewModel.unpinTracker(tracker)
        } else {
            viewModel.pinTracker(tracker)
        }
    }
    
    func editTracker(_ tracker: TrackerCoreData) {
        guard let context = tracker.managedObjectContext else {
            print("‚ùå –û—à–∏–±–∫–∞: —É —Ç—Ä–µ–∫–µ—Ä–∞ –Ω–µ—Ç context")
            return
        }
        
        guard let editVM = EditHabitViewModel(tracker: tracker, context: context) else {
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å EditHabitViewModel")
            print("–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–∞:")
            print("name: \(tracker.name ?? "nil")")
            print("emoji: \(tracker.emoji ?? "nil")")
            print("color: \(tracker.color ?? "nil")")
            print("category: \(tracker.category?.title ?? "nil")")
            return
        }
        
        print("‚úÖ EditHabitViewModel —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞: \(tracker.name ?? "nil")")
        
        let editVC = EditHabitViewController(viewModel: editVM)
        present(editVC, animated: true) {
            print("‚úÖ EditHabitViewController –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω")
        }
    }
    
    func deleteTracker(_ tracker: Tracker) {
        let alert = UIAlertController(title: "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä?", message: "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "–£–¥–∞–ª–∏—Ç—å", style: .destructive) { [weak self] _ in
            self?.viewModel.deleteTracker(tracker)
        })
        alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
        present(alert, animated: true)
    }
}
extension TrackersViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        viewModel.searchText = searchText
        updatePlaceholder()
    }
}



