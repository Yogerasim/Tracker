import CoreData
import Foundation
import Logging

final class CoreDataStack {
    
    static let shared = CoreDataStack()
    
    lazy var persistentContainer: NSPersistentContainer = {
        let container = NSPersistentContainer(name: "Tracker")
        container.loadPersistentStores { description, error in
            if let error = error as NSError? {
                AppLogger.trackers.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Persistent Store: \(error), \(error.userInfo)")
            } else {
                AppLogger.trackers.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω Store: \(description)")
                container.viewContext.automaticallyMergesChangesFromParent = true
                container.viewContext.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
            }
        }
        return container
    }()
    
    var context: NSManagedObjectContext {
        persistentContainer.viewContext
    }
    
    func saveContext() {
        let context = persistentContainer.viewContext
        guard context.hasChanges else {
            AppLogger.trackers.info("‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            return
        }
        
        do {
            try context.save()
            AppLogger.trackers.info("üíæ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Core Data")
        } catch {
            let nserror = error as NSError
            AppLogger.trackers.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: \(nserror), \(nserror.userInfo)")
        }
    }
}
