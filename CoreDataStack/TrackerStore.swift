import CoreData
import Foundation

protocol TrackerStoreDelegate: AnyObject {
    func didUpdateTrackers(_ trackers: [Tracker])
}

final class TrackerStore: NSObject {
    
    private let context: NSManagedObjectContext
    private var fetchedResultsController: NSFetchedResultsController<TrackerCoreData>!
    private var isNotifyingDelegate = false
    
    weak var delegate: TrackerStoreDelegate?
    
    init(context: NSManagedObjectContext) {
        self.context = context
        super.init()
        setupFetchedResultsController()
    }
    
    // MARK: - FRC Setup
    // MARK: - FRC Setup
    private func setupFetchedResultsController() {
        let request: NSFetchRequest<TrackerCoreData> = TrackerCoreData.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(key: "name", ascending: true)]
        
        print("‚öôÔ∏è [TrackerStore] Setting up FRC with request: \(request)")
        
        fetchedResultsController = NSFetchedResultsController(
            fetchRequest: request,
            managedObjectContext: context,
            sectionNameKeyPath: nil,
            cacheName: nil
        )
        fetchedResultsController.delegate = self
        
        do {
            try fetchedResultsController.performFetch()
            let count = fetchedResultsController.fetchedObjects?.count ?? 0
            print("üì• [TrackerStore] FRC initial fetch ‚Äî \(count) objects fetched")
            if let trackers = fetchedResultsController.fetchedObjects {
                trackers.forEach {
                    print("   ‚Ä¢ \($0.name ?? "nil") | category: \($0.category?.title ?? "nil")")
                }
            }
            notifyDelegate()
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ FRC fetch: \(error)")
        }
    }
    
    // MARK: - Public
    func getTrackers() -> [Tracker] {
        guard let cdTrackers = fetchedResultsController.fetchedObjects else { return [] }
        return cdTrackers.compactMap { $0.toTracker() }
    }
    
    // MARK: - Public
    func add(_ tracker: Tracker) {
        let cdTracker = TrackerCoreData(context: context)
        cdTracker.id = tracker.id
        cdTracker.name = tracker.name
        cdTracker.color = tracker.color
        cdTracker.emoji = tracker.emoji

        print("üü° Saving Tracker: \(tracker.name), schedule: \(tracker.schedule.map { $0.rawValue })")
        cdTracker.schedule = NSArray(array: tracker.schedule.map { $0.rawValue })
        
        if let category = tracker.trackerCategory {
            cdTracker.category = context.object(with: category.objectID) as? TrackerCategoryCoreData
        }
        
        saveContext()
    }
    
    func update(_ tracker: Tracker) {
        let request: NSFetchRequest<TrackerCoreData> = TrackerCoreData.fetchRequest()
        request.predicate = NSPredicate(format: "id == %@", tracker.id as CVarArg)
        
        do {
            if let cdTracker = try context.fetch(request).first {
                cdTracker.name = tracker.name
                cdTracker.color = tracker.color
                cdTracker.emoji = tracker.emoji

                print("üü° Saving Tracker: \(tracker.name), schedule: \(tracker.schedule.map { $0.rawValue })")
                cdTracker.schedule = NSArray(array: tracker.schedule.map { $0.rawValue })

                if let category = tracker.trackerCategory {
                    cdTracker.category = context.object(with: category.objectID) as? TrackerCategoryCoreData
                } else {
                    cdTracker.category = nil
                }
                
                saveContext()
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ update Tracker: \(error)")
        }
    }
    
    
    
    func delete(_ tracker: Tracker) {
        print("üóë [TrackerStore] delete() called for tracker: \(tracker.name)")
        let request: NSFetchRequest<TrackerCoreData> = TrackerCoreData.fetchRequest()
        request.predicate = NSPredicate(format: "id == %@", tracker.id as CVarArg)
        
        do {
            if let cdTracker = try context.fetch(request).first {
                print("üóë Deleting object: \(cdTracker.name ?? "nil") from Core Data")
                context.delete(cdTracker)
                saveContext()
            } else {
                print("‚ö†Ô∏è delete() ‚Äî tracker not found in Core Data")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ delete Tracker: \(error)")
        }
    }
    
    func fetchTracker(by id: UUID) -> TrackerCoreData? {
        let request: NSFetchRequest<TrackerCoreData> = TrackerCoreData.fetchRequest()
        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)
        request.fetchLimit = 1
        do {
            return try context.fetch(request).first
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ fetchTracker: \(error)")
            return nil
        }
    }
    
    // MARK: - Private
    private func saveContext() {
        do {
            if context.hasChanges {
                print("üíæ [TrackerStore] Saving context...")
                try context.save()
                print("‚úÖ [TrackerStore] Context saved successfully")
            } else {
                print("‚ÑπÔ∏è [TrackerStore] No changes to save")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: \(error)")
        }
    }
    
    
    private func notifyDelegate() {
        // –µ—Å–ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ–º ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        guard !isNotifyingDelegate else {
            print("‚ö†Ô∏è [TrackerStore] Skipping duplicate notifyDelegate()")
            return
        }
        isNotifyingDelegate = true

        // –°–æ–±–∏—Ä–∞–µ–º —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–µ—Ä–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—è–∂–µ–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        let trackersList = getTrackers()

        print("üü¢ [TrackerStore] notifyDelegate() called")
        print("   ‚Ä¢ trackers count: \(trackersList.count)")
        if trackersList.isEmpty {
            print("   ‚ö†Ô∏è [TrackerStore] EMPTY array passed to delegate!")
            debugFetchContents()
        } else {
            print("   ‚Ä¢ names: \(trackersList.map { $0.name })")
        }

        // –í—ã–∑–æ–≤ –¥–µ–ª–µ–≥–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            self.delegate?.didUpdateTrackers(trackersList)

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á—É—Ç—å –ø–æ–∑–∂–µ ‚Äî —ç—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ "–¥—Ä–µ–±–µ–∑–≥–∞" FRC
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.06) { [weak self] in
                self?.isNotifyingDelegate = false
                print("‚ÑπÔ∏è [TrackerStore] notifyDelegate flag cleared")
            }
        }
    }
    private func debugFetchContents() {
        print("üîç [TrackerStore] debugFetchContents() started")
        let request: NSFetchRequest<TrackerCoreData> = TrackerCoreData.fetchRequest()
        
        do {
            let results = try context.fetch(request)
            print("   ‚Ä¢ Raw CoreData objects count: \(results.count)")
            for (i, item) in results.enumerated() {
                print("     \(i+1). \(item.name ?? "nil"), category: \(item.category?.title ?? "nil"), schedule: \(String(describing: item.schedule))")
            }
        } catch {
            print("‚ùå [TrackerStore] debugFetchContents() failed: \(error)")
        }
    }
}

// MARK: - NSFetchedResultsControllerDelegate
extension TrackerStore: NSFetchedResultsControllerDelegate {
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        let ms = Int(Date().timeIntervalSince1970 * 1000) // milliseconds since epoch
        print("üì° [TrackerStore] controllerDidChangeContent() at \(ms) ms")
        notifyDelegate()
    }
}

// MARK: - Mapper
private extension TrackerCoreData {
    func toTracker() -> Tracker? {
        guard let id = id,
              let name = name,
              let color = color,
              let emoji = emoji else {
            print("‚ùå toTracker guard failed for id: \(id?.uuidString ?? "nil")")
            return nil
        }
        
        let scheduleArray: [WeekDay]
        if let data = schedule as? Data,
           let decoded = try? JSONDecoder().decode([WeekDay].self, from: data) {
            scheduleArray = decoded
            print("üíæ Decoded schedule from Core Data: \(decoded.map { $0.shortName })")
        } else {
            scheduleArray = []
        }
        
        let category = self.category
        
        let tracker = Tracker(
            id: id,
            name: name,
            color: color,
            emoji: emoji,
            schedule: scheduleArray,
            trackerCategory: category
        )
        
        print("üü¢ Mapped TrackerCoreData -> Tracker: \(tracker.name), category: \(category?.title ?? "nil")")
        return tracker
    }
}

// MARK: - Debug
extension TrackerStore {
    func debugPrintSchedules() {
        let trackers = getTrackers()
        print("\n==============================")
        print("üóì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä–æ–≤ (\(trackers.count) —à—Ç.)")
        print("==============================")
        
        for tracker in trackers {
            if tracker.schedule.isEmpty {
                print("‚ö†Ô∏è \(tracker.name): —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ü–£–°–¢–û")
            } else {
                let days = tracker.schedule.map { $0.shortName }.joined(separator: ", ")
                print("‚úÖ \(tracker.name): \(days)")
            }
        }
        print("==============================\n")
    }
}
extension TrackerStore {
    func deleteAll() {
        let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: "TrackerCoreData")
        let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
        do {
            try context.execute(deleteRequest)
            try context.save()
        } catch {
            print("‚ö†Ô∏è [TrackerStore] Failed to delete all trackers: \(error)")
        }
    }
}
